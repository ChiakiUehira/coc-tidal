{
    "fast": "speed up a pattern n times",
    "fastGap": "a fast that maintains cyclic alignment",
    "slow": "slow down a pattern n times",
    "hurry": "speed up also changes pitch",
    "rev": "reverse every cycle of a pattern",
    "palindrome": "reverse a pattern every other cycle",
    "zoom": "plays a portion of a pattern, specified by the beginning and end of a time span - zoom (0.25, 0.75)",
    "degrade": "randomly removes events from a pattern 50% of the time",
    "degradeBy": "allows you to control the percentage of events that are removed - range: 0-1",
    "spread": "spreads a function across several values - spread slow [2,4/3]) = slow \"`<2 4/3>\" :obsolete",
    "fastspread": "squeezes all the variations into one cycle",
    "spreadr": "spreads functions randomly across cycles",
    "iter": "creates subdivisions, plays them in order, but increments the starting subdivision each cycle",
    "iter'": "decrements the starting subdivision",
    "jux": "juxtapose a pattern with a functional transform only the right-hand channel",
    "jux'": "",
    "jux4": "",
    "juxcut": "",
    "juxcut'": "",
    "juxBy": "has an additional parameter, which brings the channel closer to the centre",
    "fit": "takes a pattern of integer numbers, which are used to select values from the given list",
    "fit'": "using another integer pattern to slice up a given pattern - fit' 1 2 \"0 1\" \"1 0\" \"bd sn\"",
    "trunc": "range:0-1 - truncates, so that only a fraction of the pattern is played - trunc 0.75",
    "linger": "truncates a pattern, repeateating the last part - linger 0.25",
    "scramble": "n p divides the pattern p into n equal parts, randomly selecting from the parts",
    "shuffle": "n p divides the pattern p into n equal parts, selecting a random permutation of parts",
    "smash": "cuts the samples into bits, playing the loop at different speeds from a list - smash 3 [2,3,4]",
    "brak": "squashing the pattern to fit half a cycle, and offsetting it by a quarter of a cycle.",
    "toScale": "lets you turn a pattern of notes within a scale - toScale [0, 4, 7] \"0 1 2 3\")",
    "toScale'": "for more than one octave - toScale' 24 [0,4,7,10,14,17] (run 8)",
    "loopAt": "makes sample fit the given number of cycles - loopAt 4",
    "gap": "it granualizes every sample in place as it is played, but every other grain is silent - gap 8",
    "chop": "granualizes every sample in place as it is played - chop 32",
    "striate": "granulator, cutting samples into bits in a similar to (chop)[#chop] - striate 16",
    "striate'": "a variant of striate with an extra parameter, which specifies the length of each part",
    "striateL": "loops each sample chunk a number of times specified in the second argumen",
    "stut": "applies a type of delay to a pattern with depth, feedback and time - stut 4 0.5 0.2",
    "stut'": "allows to apply a function for each step and overlays the result delayed by the given time",
    "off": "like stut' 1",
    "every": "transforms a pattern with a function every n cycle - every 3 (fast 2)",
    "every'": "with an offset - see also whenmod and foldEvery",
    "sometimesBy": "range:0-1 - probability for applying a function - sometimesBy 0.25 (fast 2)",
    "never": "0.1",
    "rarely": "0.25",
    "sometimes": "0.5",
    "often": "0.75",
    "always": "0.9",
    "someCyclesBy": "similar to sometimesBy, but for cycles",
    "foldEvery": "similar to chaining multiple every functions together",
    "ifp": "decide whether to apply one or another function depending on the result of a test function that is passed the current cycle as a number - ifp ((== 0).(flip mod 2))(fast 4)(# coarse \"24 48\")",
    "mask": "removes events from second pattern that don’t start during an event from first (mask (\"1 1 1 ~ 1 1 ~ 1\" :: Pattern Bool)",
    "swingBy": "slices and delays events in the second half of each slice by the amount x - swingBy (1/3) 4",
    "when": "only when the given test function returns true the given pattern transformation is applied. The test function will be called with the current cycle as a number. - when ((elem '4').show) (fast 4)",
    "whenmod": "applies the function to the pattern, when the remainder of the current loop number divided by the first parameter, is greater or equal than the second parameter.",
    "within": "apply a function to only a part of a pattern - within (0.75, 1)",
    "seqP": "allows you to define when a sound within a list starts and ends - seqP[(0,12,s \"bd\"),(4,12,s \"hh\")]",
    "seqPLoop": "will keep looping the sequence when it gets to the end",
    "cat": "concatenates a list of patterns into a new pattern - cat [s \"bd\", s \"sn\"]",
    "fastcat": "concatenates a list of patterns into a single cycle",
    "interlace": "shifts between the two given patterns - interlace (s \"bd sn\")(s \"hh hh\")",
    "randcat": "picks a random pattern from a list - randcat [s \"bd\", s \"sn\"]",
    "append": "appends patterns within a single cycle - append (s \"bd\") (s \"sn\")",
    "append'": "does the same as append, but over two cycles, so that the cycles alternate between the two patterns.",
    "spin": "will “spin” a layer up a pattern the given number of times, with each successive layer offset in time by an additional 1/n of a cycle, and panned by an additional 1/n - spin 4",
    "stack": "takes a list of patterns and combines them into a new pattern by playing all of the patterns in the list simultaneously - stack [s \"bd\", s \"sn\"]",
    "superimpose": "plays a modified version of a pattern at the same time as the original pattern, resulting in two patterns being played at the same time - superimpose (fast 2)",
    "weave": "applies one parameter pattern to an list of other parameter patterns",
    "weave'": "is similar in that it blends functions at the same time at different amounts over a pattern",
    "wedge": "squashing two patterns into a single pattern cycle with a ratio for the first pattern",
    "anticipate": "build up some tension, culminating in a drop to the new pattern after 8 cycle",
    "anticipateIn": "allows you to specify the number of cycles until dropping to the new pattern",
    "clutch": "degrades the current pattern while undegrading the next",
    "clutchIn": "change the number of cycles the transition takes t1 (clutchIn 8) $ s \"bd\"",
    "histpan": "pans the last n versions of the pattern across the field",
    "jump": "jumps directly into the given pattern, this is essentially the no transition-transition",
    "jumpIn": "jump transition after the specified number of cycles",
    "jumpIn'": "jump but only transitions at a cycle boundary  (e.g. when the cycle count is an integer)",
    "jumpMod": "jump but next time the cycle count modulo the given integer is zero",
    "mortal": "degrade the new pattern over time until it ends in silence",
    "superwash": "washes away the current pattern after a certain delay by applying a function to it over time, then switching over to the next pattern to which another function is applied",
    "wait": "just stop for a bit before playing new pattern",
    "wash": "wash away the current pattern by applying a function to it over time, then switching over to the next",
    "xfade": "crossfade between old and new pattern over the next two cycles",
    "xfadeIn": "crossfades between old and new pattern over given number of cycles",
    "sound": "a pattern of strings representing sound sample names (required)",
    "s": "a pattern of strings representing sound sample names (required)",
    "note": "select sample number if SuperDirt or midi note from middle C if midi",
    "n": "select sample number if SuperDirt or midi note from middle C if midi",
    "gain": "a pattern of numbers that specify volume",
    "pan": "range:0-1 - from left to right (assuming stereo)",
    "speed": "changes the speed of sample playback, \"-1\" is backwards, polyphony with \"[,]\"",
    "room": "amount of input into the reverb unit",
    "size": "notional size of the room respectively",
    "delay": "range:0-1 - sets the level of the delay signal",
    "delayfeedback": "range:0-1 - sets the amount of delay feedback",
    "delaytime": "range:0-1 - Sets the length of the delay",
    "cutoff": "range:Hz - applies the cutoff frequency of the low-pass filter",
    "lpf": "range:Hz - applies the cutoff frequency of the low-pass filter",
    "lpq": "range:0-1 - applies the resonance of the low-pass filter",
    "resonance": "range:0-1 - applies the resonance of the low-pass filter",
    "bandf": "range:Hz - sets the center frequency of the band-pass filter",
    "bpf": "range:Hz - sets the center frequency of the band-pass filter",
    "bandq": "range:0-1 - Sets the q-factor of the band-pass filter",
    "bpq": "range:0-1 - Sets the q-factor of the band-pass filter",
    "hcutoff": "range:Hz - applies the cutoff frequency of the high-pass filter",
    "hpf": "range:Hz - applies the cutoff frequency of the high-pass filter",
    "hresonance": "range:0-1 - applies the resonance of the high-pass filter",
    "hpq": "range:0-1 - applies the resonance of the high-pass filter",
    "vowel": "formant filter  with - a e i o u ~ - (requires Vowel superCollider  Quark)",
    "coarse": "fake-resampling, lowering the sample rate, i.e. 1 for original 2 for half, 3 for a third and so on.",
    "distort": "distortion",
    "crush": "bit crushing for drastic reduction in bit-depth to 16 for barely no reduction.",
    "cut": "provide cut groups to reduce overlap of sounds, \"-1\" to only affect same folder",
    "accelerate": "speed up (or slow down) samples while they play",
    "legato": "controls the length of the sound (called sustain) relative to its “space” in the patter",
    "loop": "loops the sample (from begin to end) the specified number of times",
    "nudge": "ushes things forward or backwards within built-in latency in time, allows for swing",
    "shape": "wave shaping distortion, a pattern of numbers from 0 for no distortion up to 1 for loads of distortion (watch your speakers!)",
    "sustain": "sets the duration of the sound in seconds. Primarily used in SuperDirt for softsynths, but can be used for samples as well",
    "unit": "controls how the speed parameter is interpreted, can either be 'rate (the default, percentage playback rate), 'cycle' (cycle/n), or 'secs' (n seconds), accepts values of “r” (default), “c”, or “s”",
    "begin": "range:0-1 - Skips the beginning of each sample, e.g. 0.25 to cut off the first quarter from each sample.",
    "end": "the same as begin, but cuts the end off samples, shortening them; e.g. 0.75 to cut off the last quarter of each sample.",
    "phaserdepth": "",
    "phaserrate": "",
    "attack": "",
    "hold": "",
    "release": "",
    "tremolodepth": "",
    "tremolorate": "",
    "buffer": "",
    "delta": "",
    "channel": "",
    "endSpeed": "",
    "lag": "",
    "latency": "",
    "offset": "",
    "synthGroup": "",
    "delayAmp": "",
    "leslie": "",
    "lrate": "",
    "lsize": "",
    "length": "",
    "amp": "",
    "lock": "",
    "dryBus": "",
    "effectBus": "",
    "numChannels": "",
    "server": "",
    "dirtOut": "",
    "i_out": "",
    "instrument": "",
    "unitDuration": "",
    "fadeTime": "",
    "fadeInTime": "",
    "choose": "choose[1, 5, 7] randomly choose from a list",
    "wchoose": "choose with weights - needs to be added manually",
    "cycleChoose": "like `choose` but only picks a new item from the list once each cycle",
    "irand": "random integers - (irand 8)",
    "pequal": "test if the first and the second given pattern are the same in the given number of cycles",
    "rand": "random floats",
    "run": "count up like an arpeggiator or for loop",
    "scale": "(scale 0.1 0.5 rand) to scale the i.e. random function",
    "up": "changes the speed of playback, but conforming to a 12-tone scale",
    "orbit": "SuperDirt audio channel",
    "sine": "",
    "tri": "",
    "saw": "",
    "square": "",
    "noise": "",
    "perlin": "",
    "perlin2": "",
    "midinote": "midi note number",
    "d1": "",
    "d2": "",
    "d3": "",
    "d4": "",
    "d5": "",
    "d6": "",
    "d7": "",
    "d8": "",
    "d9": "",
    "m1": "",
    "m2": "",
    "m3": "",
    "m4": "",
    "m5": "",
    "m6": "",
    "m7": "",
    "m8": "",
    "m9": "",
    "silence": "silence a channel",
    "hush": "silence all sound",
    "solo": "solo a sound",
    "cps": "cycles per second - cps (140/60/4)",
    "setcps": "cycles per second - cps (140/60/4)",
    "bps": "beat per second (133/120) -- BPM",
    "whenT": "",
    "playWhen": "",
    "playFor": "",
    "filterValues": "",
    "filterJust": "",
    "filterOnsets": "",
    "filterStartInRange": "",
    "filterOnsetsInRange": "",
    "seqToRelOnsetDeltas": "",
    "segment": "",
    "segment'": "",
    "points": "",
    "groupByTime": "",
    "timeToRand": "",
    "unDegradeBy": "",
    "splitQueries": "",
    "substruct": "",
    "stripe": "n p@: repeats pattern @p@, @n@ times per cycle. So",
    "slowstripe": "n p@: The same as @stripe@, but the result is also",
    "parseLMRule": "Lindenmayer patterns, these go well with the step sequencer",
    "parseLMRule'": "specific parser for step sequencer (chars map to string)",
    "unwrap'": "",
    "chunk": "n f p@ treats the given pattern @p@ as having @n@ chunks, and applies the function @f@ to one of those sections per cycle, running from left to right",
    "chunk'": "works much the same as `chunk`, but runs from right to left",
    "inside": "",
    "outside": "",
    "loopFirst": "",
    "timeLoop": "",
    "ur": "",
    "ur'": "",
    "inhabit": "",
    "repeatCycles": "",
    "spaceOut": "@spaceOut xs p@ repeats a pattern @p@ at different durations given by the list of time values in @xs@ there is a kindohm video about this and nudge about flex tempo",
    "flatpat": "",
    "layer": "",
    "breakUp": "@breakUp@ finds events that share the same timespan, and spreads them out during that timespan, so for example @breakUp \"[bd,sn]\"@ gets turned into @\"bd sn\"@",
    "fill": "@fill@ 'fills in' gaps in one pattern with events from another. For example @fill \"bd\" \"cp ~ cp\"@ would result in the equivalent of `\"~ bd ~\"`. This only finds gaps in a resulting pattern, in other words @\"[bd ~, sn]\"@ doesn't contain any gaps (because @sn@ covers it all), and @\"bd ~ ~ sn\"@ only contains a single gap that bridges two steps.",
    "stutter": "",
    "echo": "stutter 2",
    "triple": "stutter 3",
    "quad": "stutter 4",
    "double": "stutter 2",
    "samples": "to use numbers for rhythm instead?",
    "scalex": "exponential scale",
    "_off": "",
    "offadd": "",
    "ghost": "",
    "ghost'": "",
    "ghost''": "",
    "slice": "",
    "randslice": "",
    "tabby": "",
    "striateO": "",
    "_striate'": "",
    "_striateO": "",
    "striateL'": "",
    "_striateL": "",
    "durPattern": "",
    "durPattern'": "",
    "stutx": "",
    "soundToOrbit": "",
    "sieveToList": "",
    "sieveToString": "",
    "sieveToInts": "",
    "sieveToPat": "",
    "stepSieve": "",
    "slowstepSieve": "",
    "scaleSieve": "",
    "cyclePos": "",
    "sam": "",
    "nextSam": "",
    "enumerate": "",
    "mapFst": "",
    "mapFsts": "",
    "mapSnd": "",
    "mapSnds": "",
    "e'": "",
    "en": "",
    "compress": "",
    "discretise": "",
    "envL": "envL is a pattern of continuous Double values, representing",
    "envLR": "like envL but reversed.",
    "envEq": "'Equal power' for gain-based transitions",
    "envEqR": "Equal power reversed",
    "fadeIn": "The 1 <~ is so fade ins and outs have different degredations",
    "fadeIn'": "",
    "fadeOut": "",
    "fadeOut'": "Alternate versions where you can provide the time from which the fade starts",
    "grp": "",
    "index": "",
    "lindenmayer": "l indenmayer 1 \"a:b,b:ab\" \"ab\" -> \"bab\"",
    "spreadf": "",
    "protate": "",
    "prr": "",
    "prrw": "",
    "prw": "",
    "prot": "",
    "preplace, prep": "",
    "preplaceWith": "",
    "scan": "",
    "stretch": "",
    "stackwith": "",
    "step": "",
    "steps": "",
    "permstep": "",
    "pick": "",
    "overlay": "combines two @Pattern@s into a new pattern, so that their events are combined over time. This is the same as the infix operator `<>`",
    "samples'": "",
    "struct": "",
    "spreadChoose": "",
    "make": "",
    "merge": "",
    "mergelists": "",
    "metronome": "",
    "sig": "",
    "split": "",
    "tom": "",
    "unwrap": "",
    "sinerat": "",
    "sawrat": "",
    "trirat": "",
    "minPent": "scale",
    "majPent": "scale",
    "ritusen": "scale",
    "egyptian": "scale",
    "kumai": "scale",
    "hirajoshi": "scale",
    "iwato": "scale",
    "chinese": "scale",
    "indian": "scale",
    "pelog": "scale",
    "prometheus": "scale",
    "scriabin": "scale",
    "gong": "scale",
    "shang": "scale",
    "jiao": "scale",
    "zhi": "scale",
    "yu": "scale",
    "whole": "scale",
    "augmented": "scale",
    "augmented2": "scale",
    "hexMajor7": "scale",
    "hexDorian": "scale",
    "hexPhrygian": "scale",
    "hexSus": "scale",
    "hexMajor6": "scale",
    "hexAeolian": "scale",
    "major": "scale",
    "ionian": "scale",
    "dorian": "scale",
    "phrygian": "scale",
    "lydian": "scale",
    "mixolydian": "scale",
    "aeolian": "scale",
    "minor": "scale",
    "locrian": "scale",
    "harmonicMinor": "scale",
    "harmonicMajor": "scale",
    "melodicMinor": "scale",
    "melodicMinorDesc": "scale",
    "melodicMajor": "scale",
    "bartok": "scale",
    "hindu": "scale",
    "todi": "scale",
    "purvi": "scale",
    "marva": "scale",
    "bhairav": "scale",
    "ahirbhairav": "scale",
    "superLocrian": "scale",
    "romanianMinor": "scale",
    "hungarianMinor": "scale",
    "neapolitanMinor": "scale",
    "enigmatic": "scale",
    "spanish": "scale",
    "leadingWhole": "scale",
    "lydianMinor": "scale",
    "neapolitanMajor": "scale",
    "locrianMajor": "scale",
    "diminished": "scale",
    "diminished2 ": "scale",
    "chromatic": "scale",
    "maj": "chord",
    "aug": "chord",
    "plus": "chord",
    "sharp5": "chord",
    "six": "chord",
    "6": "chord",
    "sixNine": "chord",
    "six9": "chord",
    "sixby9": "chord",
    "6by9": "chord",
    "major7": "chord",
    "maj7": "chord",
    "major9": "chord",
    "maj9": "chord",
    "add9": "chord",
    "major11": "chord",
    "maj11": "chord",
    "add11": "chord",
    "major13": "chord",
    "maj13": "chord",
    "add13": "chord",
    "dom7": "chord",
    "dom9": "chord",
    "dom11": "chord",
    "dom13": "chord",
    "sevenFlat5": "chord",
    "7f5": "chord",
    "sevenSharp5": "chord",
    "7s5": "chord",
    "sevenFlat9": "chord",
    "7f9": "chord",
    "nine": "chord",
    "eleven": "chord",
    "11": "chord",
    "thirteen": "chord",
    "13": "chord",
    "min": "chord",
    "diminish": "chord",
    "ed": "chord",
    "dim": "chord",
    "minorSharp5": "chord",
    "msharp5": "chord",
    "mS5": "chord",
    "minor6": "chord",
    "min6": "chord",
    "minorSixNine": "chord",
    "minor69": "chord",
    "min69": "chord",
    "minSixNine": "chord",
    "m69": "chord",
    "mSixNine": "chord",
    "m6by9": "chord",
    "minor7flat5": "chord",
    "min7f": "chord",
    "lat5": "chord",
    "m7flat5": "chord",
    "m7f5": "chord",
    "minor7": "chord",
    "min7": "chord",
    "minor7sharp5": "chord",
    "min7sharp5": "chord",
    "m7sharp5": "chord",
    "m7s5": "chord",
    "minor7flat9": "chord",
    "min7flat9": "chord",
    "m7flat9": "chord",
    "m7f9": "chord",
    "minor7sharp9": "chord",
    "m": "chord",
    "in7sharp9": "chord",
    "m7sharp9": "chord",
    "m7s9": "chord",
    "diminished7": "chord",
    "dim7": "chord",
    "minor9": "chord",
    "min9": "chord",
    "minor11": "chord",
    "min11": "chord",
    "m11": "chord",
    "minor13": "chord",
    "min13": "chord",
    "m13": "chord",
    "one": "chord",
    "1": "chord",
    "five": "chord",
    "5": "chord",
    "sus2": "chord",
    "sus4": "chord",
    "seven": "chord",
    "Sus2": "chord",
    "7sus2": "chord",
    "sevenSus4": "chord",
    "7sus4": "chord",
    "nineSus4": "chord",
    "ninesus4": "chord",
    "9sus4": "chord",
    "sevenFlat10": "chord",
    "7f10": "chord",
    "nineSharp5": "chord",
    "9s5": "chord",
    "m9sharp5": "chord",
    "m9s5": "chord",
    "sevenSharp5flat9": "chord",
    "7s5f9": "chord",
    "m7sharp5flat9": "chord",
    "elevenSharp": "chord",
    "11s": "chord",
    "m11sharp": "chord",
    "m11s": "chord"
}
